name: üöÄ Server
on:
  push:
    branches:
      - main
    paths:
      - "server/**"
      - ".github/workflows/server.yaml"
  pull_request: {}
permissions:
  actions: write
  contents: read

env:
  IONOS_USERID: ${{ secrets.IONOS_USERID }}
  IONOS_PW: ${{ secrets.IONOS_PW }}
  IONOS_URL: ${{ vars.IONOS_URL }}
  IONOS_PORT: ${{ vars.IONOS_PORT }}
  DOCKER_USERID: ${{ secrets.DOCKER_USERID }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}

jobs:
  verify:
    name: ‚¨£ Verify
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-verify
      cancel-in-progress: true

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.5.0
          cache: "yarn"
          cache-dependency-path: server/yarn.lock

      - name: Run install
        run: yarn install --frozen-lockfile

      - name: Run lint
        run: yarn lint

      - name: Run typecheck
        run: yarn typecheck

      - name: Run test
        run: yarn test:ci

      - name: Archive test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage summary
          path: |
            server/coverage/coverage*.json

      - name: Coverage Summary Markdown
        uses: autoscatto/action-coverage-summary-markdown@v1.0.6
        id: coverage_summary_markdown
        with:
          summary_file: "server/coverage/coverage-summary.json"
          warning_threshold: 65
          good_threshold: 90
          fail_if: true

      - name: Display summary
        run: echo "${{steps.coverage_summary_markdown.outputs.lines}}" >> $GITHUB_STEP_SUMMARY

  build:
    runs-on: ubuntu-latest
    if: ${{ (github.ref == 'refs/heads/main' ) && github.event_name == 'push' }}
    needs: [verify]
    defaults:
      run:
        working-directory: server
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-deploy
      cancel-in-progress: true
    steps:
      - name: Inc build number
        uses: action-pack/increment@v2
        with:
          name: "BUILD_NUMBER"
          token: ${{ env.REPO_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERID }}
          password: ${{ env.DOCKER_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{secrets.DOCKER_USERID}}/real-weather:${{ env.BUILD_NUMBER }}

  # deploy:
  #   name: üê≥ Deploy
  #   # only build/deploy main branch on pushes
  #   if: ${{ (github.ref == 'refs/heads/main' ) && github.event_name == 'push' }}
  #   needs: [verify]
  #   defaults:
  #     run:
  #       working-directory: server
  #   concurrency:
  #     group: ${{ github.workflow }}-${{ github.ref }}-deploy
  #     cancel-in-progress: true
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: ‚¨áÔ∏è Checkout repo
  #       uses: actions/checkout@v3

  #     - name: ‚éî Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18.5.0
  #         cache: "yarn"
  #         cache-dependency-path: server/yarn.lock

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile
  #     - name: Build them
  #       run: yarn build
  #     - name: Build docker image
  #       run: docker build . -t real-weather:${GITHUB_RUN_NUMBER}
  #     - name: Login to docker hub
  #       run: docker login -u ${DOCKER_USERID}
  #     # - name: Deploy docker image to repo
  #     #   run: ssh docker images
  #     # - name: Deploy docker image to ionos
  #     #   run: ssh ${IONOS_USERID}@${IONOS_URL}
  #     - name: Deploy to remote
  #       uses: appleboy/ssh-action@v0.1.10
  #       with:
  #         host: ${{ env.IONOS_URL }}
  #         username: ${{ env.IONOS_USERID }}
  #         password: ${{ env.IONOS_PW }}
  #         # port: $IONOS_PORT
  #         script: |
  #           docker build . -t real-weather-server
  #           ls -al

  deploy:
    name: üê≥ Deploy
    if: ${{ (github.ref == 'refs/heads/main' ) && github.event_name == 'push' }}
    needs: [build]
    defaults:
      run:
        working-directory: server
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-deploy
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to remote
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.IONOS_URL }}
          username: ${{ env.IONOS_USERID }}
          password: ${{ env.IONOS_PW }}
          # port: $IONOS_PORT
          script: |
            docker stop real-weather-server
            docker run --name real-weather-server -d -t ${{secrets.DOCKER_USERID}}/real-weather:${{ env.BUILD_NUMBER }}

  # build-and-package:
  #     if: github.ref == 'refs/heads/main'
  #     needs: [verify]
  #     runs-on: ubuntu-latest
  #     defaults:
  #       run:
  #         working-directory: server
  #     steps:
  #         - uses: actions/checkout@v3
  #         - uses: aws-actions/setup-sam@v2
  #           with:
  #               use-installer: true

  #         - name: Build resources
  #           run: sam build --template ${SAM_TEMPLATE} --use-container

  #         - name: Upload artifacts to production artifact buckets
  #           run: |
  #               sam package \
  #                 --region ${PROD_REGION} \
  #                 --output-template-file packaged-prod.yaml

  #         - name: Upload generated artifacts
  #           uses: actions/upload-artifact@v3
  #           with:
  #               name: packaged template
  #               path: server/packaged-prod.yaml

  #         - uses: actions/upload-artifact@v3
  #           with:
  #               name: packaged-prod.yaml
  #               path: packaged-prod.yaml

  # deploy-prod:
  #     if: github.ref == 'refs/heads/main'
  #     needs: [verify, build-and-package]
  #     runs-on: ubuntu-latest
  #     # Configure GitHub Action Environment to have a manual approval step before deployment to production
  #     # https://docs.github.com/en/actions/reference/environments
  #     # environment: <configured-environment>
  #     steps:
  #         - uses: actions/checkout@v3
  #         - uses: aws-actions/setup-sam@v2
  #           with:
  #               use-installer: true
  #         - uses: actions/download-artifact@v3
  #           with:
  #               name: packaged-prod.yaml

  #         # - name: Assume the prod pipeline user role
  #         #   uses: aws-actions/configure-aws-credentials@v1-node16
  #         #   with:
  #         #       aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         #       aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY}}
  #         #       aws-region: ${{ env.PROD_REGION }}
  #         #       role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         #       role-session-name: prod-deployment
  #         #       role-duration-seconds: 3600
  #         #       role-skip-session-tagging: true

  #         - name: Deploy to production account
  #           run: |
  #               sam deploy --stack-name ${PROD_STACK_NAME} \
  #                 --template packaged-prod.yaml \
  #                 --capabilities CAPABILITY_IAM \
  #                 --region ${PROD_REGION} \
  #                 --no-fail-on-empty-changeset
